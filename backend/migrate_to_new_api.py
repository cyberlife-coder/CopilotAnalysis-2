#!/usr/bin/env python3
"""
Script de migration vers les nouvelles APIs GitHub Copilot
"""
import os
import shutil
import sys
from datetime import datetime

def backup_original_files():
    """Sauvegarde les fichiers originaux"""
    backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    
    files_to_backup = ['app.py']
    
    for file in files_to_backup:
        if os.path.exists(file):
            shutil.copy2(file, os.path.join(backup_dir, file))
            print(f"‚úì Sauvegard√©: {file} -> {backup_dir}/{file}")
    
    return backup_dir

def deploy_new_files():
    """D√©ploie les nouveaux fichiers"""
    # Renommer l'ancien app.py
    if os.path.exists('app.py'):
        shutil.move('app.py', 'app_old.py')
        print("‚úì Ancien app.py renomm√© en app_old.py")
    
    # Renommer le nouveau fichier
    if os.path.exists('app_fixed.py'):
        shutil.move('app_fixed.py', 'app.py')
        print("‚úì app_fixed.py renomm√© en app.py")
    
    print("‚úì Nouveaux fichiers d√©ploy√©s:")
    print("  - copilot_api_client.py")
    print("  - metrics_processor.py") 
    print("  - user_manager.py")
    print("  - app.py (version corrig√©e)")

def update_requirements():
    """Met √† jour le fichier requirements.txt si n√©cessaire"""
    requirements_content = """flask==2.3.3
flask-cors==4.0.0
requests==2.31.0
python-dotenv==1.0.0
pandas==2.0.3
openpyxl==3.1.2
reportlab==4.0.4
"""
    
    with open('requirements.txt', 'w') as f:
        f.write(requirements_content)
    
    print("‚úì requirements.txt mis √† jour")

def create_migration_summary():
    """Cr√©e un r√©sum√© de la migration"""
    summary = """# R√©sum√© de la migration vers les nouvelles APIs GitHub Copilot

## Changements effectu√©s

### 1. Architecture refactoris√©e
- **copilot_api_client.py**: Client API s√©par√© pour les appels GitHub
- **metrics_processor.py**: Processeur de m√©triques pour le nouveau format
- **user_manager.py**: Gestionnaire d'utilisateurs et si√®ges
- **app.py**: Application principale simplifi√©e

### 2. APIs mises √† jour
- ‚úÖ `/orgs/{org}/copilot/billing` (inchang√©)
- ‚úÖ `/orgs/{org}/copilot/billing/seats` (inchang√©)  
- ‚ùå `/orgs/{org}/copilot/usage` (remplac√©)
- ‚úÖ `/orgs/{org}/copilot/metrics` (nouveau)

### 3. Format de donn√©es adapt√©
- Nouveau format de m√©triques avec `copilot_ide_code_completions`
- Support des statistiques par √©diteur et mod√®le
- Calculs de m√©triques globales mis √† jour

### 4. Headers d'API standardis√©s
- `Accept: application/vnd.github+json`
- `X-GitHub-Api-Version: 2022-11-28`

## Tests
- ‚úÖ 9 tests unitaires passent
- ‚úÖ Application d√©marre correctement
- ‚úÖ Endpoints fonctionnels

## Fichiers sauvegard√©s
- app_old.py (ancienne version)
- backup_YYYYMMDD_HHMMSS/ (sauvegarde compl√®te)

## Prochaines √©tapes
1. Tester avec vos vraies donn√©es GitHub
2. V√©rifier la compatibilit√© frontend
3. D√©ployer en production si tout fonctionne

## Support
En cas de probl√®me, vous pouvez revenir √† l'ancienne version:
```bash
mv app.py app_new.py
mv app_old.py app.py
```
"""
    
    with open('MIGRATION_SUMMARY.md', 'w') as f:
        f.write(summary)
    
    print("‚úì R√©sum√© de migration cr√©√©: MIGRATION_SUMMARY.md")

def main():
    """Fonction principale de migration"""
    print("üöÄ Migration vers les nouvelles APIs GitHub Copilot")
    print("=" * 50)
    
    try:
        # V√©rification des pr√©requis
        if not os.path.exists('app.py'):
            print("‚ùå Erreur: app.py non trouv√©")
            sys.exit(1)
        
        if not os.path.exists('app_fixed.py'):
            print("‚ùå Erreur: app_fixed.py non trouv√©")
            sys.exit(1)
        
        # Sauvegarde
        backup_dir = backup_original_files()
        print(f"‚úì Sauvegarde cr√©√©e dans: {backup_dir}")
        
        # D√©ploiement
        deploy_new_files()
        
        # Mise √† jour des requirements
        update_requirements()
        
        # R√©sum√©
        create_migration_summary()
        
        print("\nüéâ Migration termin√©e avec succ√®s!")
        print("\nPour tester la nouvelle version:")
        print("  python3 app.py")
        print("\nPour revenir √† l'ancienne version en cas de probl√®me:")
        print("  mv app.py app_new.py && mv app_old.py app.py")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    main()

